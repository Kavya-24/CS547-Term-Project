# -*- coding: utf-8 -*-
"""Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13nKhv5TkFF6LAWAXFCgvSRrOX74pdIu-

## Analysis

Steps to reproduce
1. Load a new run-time
2. Load all the test_files (solidity smart contracts) in the run-time enivronment

## Static-Analysis
Static code analysis is a method of debugging by examining source code before a program is run. It's done by analyzing a set of code against a set (or multiple sets) of coding rules. Static analysis identifies defects before we run a program
"""

#set up slither
!pip install slither-analyzer
!pip install solc-select
!solc-select install 0.8.9
import os
os.environ['SOLC_VERSION'] = '0.8.9'

!slither /content/test_type1.sol

!slither /content/safeMath.sol

"""## Symbolic Execution
Symbolic execution is a method of executing a program abstractly so that it covers multiple execution paths through the code. The execution makes use of “symbols” as inputs to the program and the results are expressed in terms of the symbolic inputs
"""

#set up manticore
!pip install manticore==0.3.0
!pip install protobuf==3.20.0
!pip install solidity_parser
!pip install solc
!pip install py-solc-x
!pip install manticore-eth
!pip install manticore[native]
import os
os.environ['PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION'] = 'python'
from manticore.ethereum import ManticoreEVM
from manticore.ethereum import ManticoreEVM
from manticore.ethereum.abi import ABI
from solcx import compile_source
import json

!solc /content/test_type1.sol --bin --abi --optimize -o build

# set the path to the directory containing the uploaded files
path = "/content/build"
filenames = os.listdir(path)
contract_specs = {}
for f in filenames:
  name, ext = f.split('.')
  if ext == 'bin':
    contract_specs[f] = name + ".abi"

print(contract_specs)

!solc --version && z3 --version

!manticore safeMath.sol

!zip -r /content/mcore_sm49_f_4.zip /content/mcore_sm49_f_4

!manticore test_type1.sol



"""## Mythril
Mythril is an open-source security analysis tool used to detect security vulnerabilities in smart contracts built for Ethereum, Hedera, Quorum, Vechain, Roostock and other EVM-compatible blockchains
"""

!pip install mythril

!myth analyze safeMath.sol

!myth analyze test_type1.sol

"""## Securify Analysis
It is a tool that performs static analysis on Ethereum smart contracts to detect vulnerabilities such as reentrancy, uninitialized storage pointers, and more.
"""

# !apt-get install -y openjdk-8-jdk-headless
# !git clone https://github.com/eth-sri/securify.git
# %cd /content/securify
# !pip install -U -r /content/securify/requirements.txt

# !./build_souffle.sh
# !./gradlew tasks
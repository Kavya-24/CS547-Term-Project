{"downloaded_files/dataset/front_running/odds_and_evens.sol": "==== Unchecked return value from external call. ====\nSWC ID: 104\nSeverity: Medium\nContract: OddsAndEvens\nFunction name: getProfit()\nPC address: 428\nEstimated Gas Usage: 2505 - 37116\nThe return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\n--------------------\nIn file: downloaded_files/dataset/front_running/odds_and_evens.sol:50\n\nmsg.sender.send(this.balance)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: play(uint256), txdata: 0x6898f82b, value: 0xde0b6b3a7640000\nCaller: [CREATOR], function: getProfit(), txdata: 0x679dffb4, value: 0x0\n\n==== Exception State ====\nSWC ID: 110\nSeverity: Medium\nContract: OddsAndEvens\nFunction name: players(uint256)\nPC address: 727\nEstimated Gas Usage: 258 - 353\nAn assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\n--------------------\nIn file: downloaded_files/dataset/front_running/odds_and_evens.sol:16\n\nPlayer[2] public players\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: players(uint256), txdata: 0xf71d96cb80, decoded_data: (57896044618658097711785492504343953926634992332820282019728792003956564819968,), value: 0x0\n\n==== Integer Arithmetic Bugs ====\nSWC ID: 101\nSeverity: High\nContract: OddsAndEvens\nFunction name: play(uint256)\nPC address: 837\nEstimated Gas Usage: 50811 - 248626\nThe arithmetic operator can overflow.\nIt is possible to cause an integer overflow or underflow in the arithmetic operation. \n--------------------\nIn file: downloaded_files/dataset/front_running/odds_and_evens.sol:36\n\nplayers[0].number+players[1].number\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x205e0b6d387900002, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x20000000000000000, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: play(uint256), txdata: 0x6898f82b80, decoded_data: (57896044618658097711785492504343953926634992332820282019728792003956564819968,), value: 0xde0b6b3a7640000\nCaller: [ATTACKER], function: play(uint256), txdata: 0x6898f82b88, decoded_data: (61514547407324228818772085785865451047049679353621549645961841504203850121216,), value: 0xde0b6b3a7640000\n\n==== Unchecked return value from external call. ====\nSWC ID: 104\nSeverity: Medium\nContract: OddsAndEvens\nFunction name: play(uint256)\nPC address: 970\nEstimated Gas Usage: 50811 - 248626\nThe return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\n--------------------\nIn file: downloaded_files/dataset/front_running/odds_and_evens.sol:38\n\nplayers[0].addr.send(1800 finney)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x205e0bcc456780001, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: play(uint256), txdata: 0x6898f82b, value: 0xde0b6b3a7640000\nCaller: [CREATOR], function: play(uint256), txdata: 0x6898f82b, value: 0xde0b6b3a7640000\n\n==== Unchecked return value from external call. ====\nSWC ID: 104\nSeverity: Medium\nContract: OddsAndEvens\nFunction name: play(uint256)\nPC address: 1093\nEstimated Gas Usage: 50801 - 248616\nThe return value of a message call is not checked.\nExternal calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.\n--------------------\nIn file: downloaded_files/dataset/front_running/odds_and_evens.sol:41\n\nplayers[1].addr.send(1800 finney)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x20000000000000002, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: play(uint256), txdata: 0x6898f82b, value: 0xde0b6b3a7640000\nCaller: [ATTACKER], function: play(uint256), txdata: 0x6898f82b9898989898989898989898989898989898989898989898989898989898989801, decoded_data: (69021166917929653742677606750276713700772696741872022486264912820403120412673,), value: 0xde0b6b3a7640000\n\n==== Unprotected Ether Withdrawal ====\nSWC ID: 105\nSeverity: High\nContract: OddsAndEvens\nFunction name: play(uint256)\nPC address: 1093\nEstimated Gas Usage: 50801 - 248616\nAny sender can withdraw Ether from the contract account.\nArbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.\n--------------------\nIn file: downloaded_files/dataset/front_running/odds_and_evens.sol:41\n\nplayers[1].addr.send(1800 finney)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x1aa111664cd00000, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x210116bfa7e40002, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: play(uint256), txdata: 0x6898f82b, value: 0xde0b6b3a7640000\nCaller: [ATTACKER], function: play(uint256), txdata: 0x6898f82b9898989898989898989898989898989898989898989898989898989898989801, decoded_data: (69021166917929653742677606750276713700772696741872022486264912820403120412673,), value: 0xde0b6b3a7640000\n\n\n", "downloaded_files/dataset/front_running/eth_tx_order_dependence_minimal.sol": "==== Unprotected Ether Withdrawal ====\nSWC ID: 105\nSeverity: High\nContract: EthTxOrderDependenceMinimal\nFunction name: claimReward(uint256)\nPC address: 686\nEstimated Gas Usage: 8566 - 63507\nAny sender can withdraw Ether from the contract account.\nArbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.\n--------------------\nIn file: downloaded_files/dataset/front_running/eth_tx_order_dependence_minimal.sol:31\n\nmsg.sender.transfer(reward)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x40030000010000004, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x4262124400080010, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [CREATOR], function: setReward(), txdata: 0x3eb6a67e, value: 0x1\nCaller: [ATTACKER], function: claimReward(uint256), txdata: 0xae169a50, value: 0x0\n\n\n", "downloaded_files/dataset/front_running/FindThisHash.sol": "The analysis was completed successfully. No issues were detected.\n\n", "downloaded_files/dataset/front_running/ERC20.sol": "The analysis was completed successfully. No issues were detected.\n\n", "downloaded_files/dataset/time_manipulation/timed_crowdsale.sol": "The analysis was completed successfully. No issues were detected.\n\n", "downloaded_files/dataset/time_manipulation/roulette.sol": "==== Dependence on predictable environment variable ====\nSWC ID: 116\nSeverity: Low\nContract: Roulette\nFunction name: fallback\nPC address: 99\nEstimated Gas Usage: 888 - 983\nA control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\n--------------------\nIn file: downloaded_files/dataset/time_manipulation/roulette.sol:18\n\nrequire(now != pastBlockTime)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x40000000001b, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x8ac7230489e80000\n\n==== Dependence on predictable environment variable ====\nSWC ID: 116\nSeverity: Low\nContract: Roulette\nFunction name: fallback\nPC address: 132\nEstimated Gas Usage: 5957 - 26052\nA control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\n--------------------\nIn file: downloaded_files/dataset/time_manipulation/roulette.sol:21\n\nif(now % 15 == 0) { // winner\n            msg.sender.transfer(this.balance);\n        }\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x900000000020802, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: unknown, txdata: 0x, decoded_data: , value: 0x8ac7230489e80000\n\n==== Unprotected Ether Withdrawal ====\nSWC ID: 105\nSeverity: High\nContract: Roulette\nFunction name: fallback\nPC address: 203\nEstimated Gas Usage: 7524 - 61805\nAny sender can withdraw Ether from the contract account.\nArbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.\n--------------------\nIn file: downloaded_files/dataset/time_manipulation/roulette.sol:22\n\nmsg.sender.transfer(this.balance)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x572c020000020002, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x1c03c5e7b818003fe, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x1\nCaller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x8ac7230489e80000\nCaller: [ATTACKER], function: blockHashAddendsInexpansible(uint256), txdata: 0x00000000, value: 0x8ac7230489e80000\n\n\n", "downloaded_files/dataset/time_manipulation/governmental_survey.sol": "==== External Call To User-Supplied Address ====\nSWC ID: 107\nSeverity: Low\nContract: Attacker\nFunction name: attack(address,uint256)\nPC address: 474\nEstimated Gas Usage: 1828 - 36204\nA call to a user-supplied address is executed.\nAn external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.\n--------------------\nIn file: downloaded_files/dataset/time_manipulation/governmental_survey.sol:50\n\nGovernmental(target).resetInvestment()\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: attack(address,uint256), txdata: 0x52fba25c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef20, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 14474011154664524427946373126085988481658748083205070504932198000989141204992), value: 0x0\n\n\n", "downloaded_files/dataset/time_manipulation/ether_lotto.sol": "==== Exception State ====\nSWC ID: 110\nSeverity: Medium\nContract: EtherLotto\nFunction name: play()\nPC address: 276\nEstimated Gas Usage: 153 - 248\nAn assertion violation was triggered.\nIt is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).\n--------------------\nIn file: downloaded_files/dataset/time_manipulation/ether_lotto.sol:33\n\nfunction play() payable {\n\n        // Participants must spend some fixed ether before playing lottery.\n        assert(msg.value == TICKET_AMOUNT);\n\n        // Increase pot for each participant.\n        pot += msg.value;\n\n        // Compute some *almost random* value for selecting winner from current transaction.\n        // <yes> <report> TIME_MANIPULATION\n        var random = uint(sha3(block.timestamp)) % 2;\n\n        // Distribution: 50% of participants will be winners.\n        if (random == 0) {\n\n            // Send fee to bank account.\n            bank.transfer(FEE_AMOUNT);\n\n            // Send jackpot to winner.\n            msg.sender.transfer(pot - FEE_AMOUNT);\n\n            // Restart jackpot.\n            pot = 0;\n        }\n    }\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: play(), txdata: 0x93e84cd9, value: 0x0\n\n==== Dependence on predictable environment variable ====\nSWC ID: 116\nSeverity: Low\nContract: EtherLotto\nFunction name: play()\nPC address: 342\nEstimated Gas Usage: 6138 - 26514\nA control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\n--------------------\nIn file: downloaded_files/dataset/time_manipulation/ether_lotto.sol:46\n\nif (random == 0) {\n\n            // Send fee to bank account.\n            bank.transfer(FEE_AMOUNT);\n\n            // Send jackpot to winner.\n            msg.sender.transfer(pot - FEE_AMOUNT);\n\n            // Restart jackpot.\n            pot = 0;\n        }\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [SOMEGUY], function: play(), txdata: 0x93e84cd9, value: 0xa\n\n==== Multiple Calls in a Single Transaction ====\nSWC ID: 113\nSeverity: Low\nContract: EtherLotto\nFunction name: play()\nPC address: 492\nEstimated Gas Usage: 14414 - 123492\nMultiple calls are executed in the same transaction.\nThis call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they\u2019re part of your own codebase).\n--------------------\nIn file: downloaded_files/dataset/time_manipulation/ether_lotto.sol:52\n\nmsg.sender.transfer(pot - FEE_AMOUNT)\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0xa, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: play(), txdata: 0x93e84cd9, value: 0xa\n\n\n", "downloaded_files/dataset/time_manipulation/lottopollo.sol": "==== Dependence on predictable environment variable ====\nSWC ID: 116\nSeverity: Low\nContract: lottopollo\nFunction name: draw(uint256)\nPC address: 212\nEstimated Gas Usage: 261 - 356\nA control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\n--------------------\nIn file: downloaded_files/dataset/time_manipulation/lottopollo.sol:13\n\nrand> 0 && now - rand > 24 hours\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: draw(uint256), txdata: 0x3b304147, value: 0x0\n\n==== Dependence on predictable environment variable ====\nSWC ID: 116\nSeverity: Low\nContract: lottopollo\nFunction name: draw(uint256)\nPC address: 227\nEstimated Gas Usage: 278 - 373\nA control flow decision is made based on The block.timestamp environment variable.\nThe block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.\n--------------------\nIn file: downloaded_files/dataset/time_manipulation/lottopollo.sol:13\n\nif ( rand> 0 && now - rand > 24 hours ) {\n      msg.sender.send( msg.value );\n\n      if ( this.balance > 0 ) {\n        leader.send( this.balance );\n      }\n    }\n    else if ( msg.value >= 1 ether ) {\n      leader = msg.sender;\n      timestamp = rand;\n    }\n\n--------------------\nInitial State:\n\nAccount: [CREATOR], balance: 0x0, nonce:0, storage:{}\nAccount: [ATTACKER], balance: 0x0, nonce:0, storage:{}\n\nTransaction Sequence:\n\nCaller: [CREATOR], calldata: , decoded_data: , value: 0x0\nCaller: [ATTACKER], function: draw(uint256), txdata: 0x3b304147, value: 0x0\n\n\n", "downloaded_files/dataset/denial_of_service/auction.sol": "The analysis was completed successfully. No issues were detected.\n\n", "downloaded_files/dataset/denial_of_service/dos_number.sol": "The analysis was completed successfully. No issues were detected.\n\n"}